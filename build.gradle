buildscript {
    dependencies {
        classpath("gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.0")
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.14.0'
}

apply plugin: 'checkstyle'
apply plugin: 'com.github.spotbugs'
apply plugin: 'pmd'

group 'ch.tie.gradle.plugins'

gradlePlugin {
    plugins {
        json2mdPlugin {
            id = 'ch.tie.gradle.plugins.json2md'
            displayName = 'Json2md'
            description = "generates a markdown file from 'spring-configuration-metadata.json' to document your configuration properties"
            implementationClass = 'ch.tie.gradle.plugins.json2md.Json2mdPlugin'
            version = '1.1.0'
        }
    }
}

pluginBundle {
    website = 'https://github.com/the-i-engineers/tie-gradle-plugins'
    vcsUrl = 'https://github.com/the-i-engineers/tie-gradle-plugins.git'
    tags = ['the i-engineers', 'e-health', 'java', 'spring']
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    implementation 'commons-io:commons-io:2.6'
    implementation "org.apache.commons:commons-lang3:3.12.0"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

checkstyle {
    configFile = rootProject.file('gradle/checkstyle.xml')
}

pmd {
    toolVersion = '6.12.0'
    rulePriority = 3
}

pmdMain {
    ruleSets = []
    ruleSetFiles = rootProject.files('gradle/pmd/main.xml')
}

pmdTest {
    ruleSets = []
    ruleSetFiles = rootProject.files('gradle/pmd/test.xml')
}

compileJava {
    options.encoding = 'UTF-8'
    options.warnings = true
    options.deprecation = true
}

test {
    useJUnitPlatform()
}
